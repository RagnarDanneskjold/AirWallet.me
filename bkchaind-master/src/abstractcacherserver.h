/**
* THIS FILE IS GENERATED BY jsonrpcstub, DO NOT CHANGE IT!!!!!
*/

#ifndef _ABSTRACTCACHERSERVER_H_
#define _ABSTRACTCACHERSERVER_H_

#include "../json-rpc-cpp/src/jsonrpc/rpc.h"

class AbstractCacherServer : public jsonrpc::AbstractServer<AbstractCacherServer>
{
public:
	AbstractCacherServer(jsonrpc::AbstractServerConnector* conn) :
		jsonrpc::AbstractServer<AbstractCacherServer>(conn)
	{
			this->bindAndAddMethod(new jsonrpc::Procedure("getaddress", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "address", jsonrpc::JSON_STRING, NULL), &AbstractCacherServer::getaddressI);
			this->bindAndAddMethod(new jsonrpc::Procedure("getblock", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "hash", jsonrpc::JSON_STRING, NULL), &AbstractCacherServer::getblockI);
			this->bindAndAddMethod(new jsonrpc::Procedure("getblockhash", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "height", jsonrpc::JSON_INTEGER, NULL), &AbstractCacherServer::getblockhashI);
			this->bindAndAddMethod(new jsonrpc::Procedure("getblockheight", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "height", jsonrpc::JSON_INTEGER, NULL), &AbstractCacherServer::getblockhashI);
			this->bindAndAddMethod(new jsonrpc::Procedure("getblocks", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "page", jsonrpc::JSON_INTEGER, NULL), &AbstractCacherServer::getblocksI);
			this->bindAndAddMethod(new jsonrpc::Procedure("getlatesttransactions", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, NULL), &AbstractCacherServer::getlatesttransactionsI);
			this->bindAndAddMethod(new jsonrpc::Procedure("getrawtx", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "hash", jsonrpc::JSON_STRING, NULL), &AbstractCacherServer::getrawtxI);

			this->bindAndAddMethod(new jsonrpc::Procedure("tx_hash", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "hash", jsonrpc::JSON_STRING, NULL), &AbstractCacherServer::tx_hashI);
			this->bindAndAddMethod(new jsonrpc::Procedure("tx_index", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "index", jsonrpc::JSON_INTEGER, NULL), &AbstractCacherServer::tx_indexI);
			this->bindAndAddMethod(new jsonrpc::Procedure("tx_push", jsonrpc::PARAMS_BY_POSITION, jsonrpc::JSON_OBJECT, "hexdata", jsonrpc::JSON_STRING, NULL), &AbstractCacherServer::tx_pushI);
			this->bindAndAddMethod(new jsonrpc::Procedure("block_hash", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "hash", jsonrpc::JSON_STRING, NULL), &AbstractCacherServer::block_hashI);
			this->bindAndAddMethod(new jsonrpc::Procedure("block_index", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "index", jsonrpc::JSON_INTEGER, NULL), &AbstractCacherServer::block_indexI);
			this->bindAndAddMethod(new jsonrpc::Procedure("block_height", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "height", jsonrpc::JSON_INTEGER, NULL), &AbstractCacherServer::block_heightI);
			this->bindAndAddMethod(new jsonrpc::Procedure("address_balance", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "address", jsonrpc::JSON_STRING, "confirmations", jsonrpc::JSON_INTEGER, NULL), &AbstractCacherServer::address_balanceI);
			this->bindAndAddMethod(new jsonrpc::Procedure("address_unspent", jsonrpc::PARAMS_BY_NAME, jsonrpc::JSON_OBJECT, "address", jsonrpc::JSON_STRING, "confirmations", jsonrpc::JSON_INTEGER, NULL), &AbstractCacherServer::address_unspentI);
	}

	inline virtual void getaddressI(const Json::Value& request, Json::Value& response)
	{
		response = this->getaddress(request["address"].asString());
	}

	inline virtual void getblockI(const Json::Value& request, Json::Value& response)
	{
		response = this->getblock(request["hash"].asString());
	}

	inline virtual void getblockhashI(const Json::Value& request, Json::Value& response)
	{
		response = this->getblockhash(request["height"].asInt());
	}

	inline virtual void getblockheightI(const Json::Value& request, Json::Value& response)
	{
		response = this->getblockheight(request["height"].asInt());
	}

	inline virtual void getblocksI(const Json::Value& request, Json::Value& response)
	{
		response = this->getblocks(request["page"].asInt());
	}

	inline virtual void getlatesttransactionsI(const Json::Value& request, Json::Value& response)
	{
		response = this->getlatesttransactions();
	}

	inline virtual void getrawtxI(const Json::Value& request, Json::Value& response)
	{
		response = this->getrawtx(request["hash"].asString());
	}

	inline virtual void tx_hashI(const Json::Value& request, Json::Value& response)
	{
		response = this->tx_hash(request["hash"].asString());
	}

	inline virtual void tx_indexI(const Json::Value& request, Json::Value& response)
	{
		response = this->tx_index(request["index"].asInt());
	}

	virtual void tx_pushI(const Json::Value& request, Json::Value& response) = 0;

	inline virtual void block_hashI(const Json::Value& request, Json::Value& response)
	{
		response = this->block_hash(request["hash"].asString());
	}

	inline virtual void block_indexI(const Json::Value& request, Json::Value& response)
	{
		response = this->block_index(request["index"].asInt());
	}

	inline virtual void block_heightI(const Json::Value& request, Json::Value& response)
	{
		response = this->block_height(request["height"].asInt());
	}

	inline virtual void address_balanceI(const Json::Value& request, Json::Value& response)
	{
		response = this->address_balance(request["address"].asString(), request["confirmations"].asInt());
	}

	inline virtual void address_unspentI(const Json::Value& request, Json::Value& response)
	{
		response = this->address_unspent(request["address"].asString(), request["confirmations"].asInt());
	}

	virtual Json::Value getaddress(const std::string& address) = 0;
	virtual Json::Value getblock(const std::string& hash) = 0;
	virtual Json::Value getblockhash(const int& height) = 0;
	virtual Json::Value getblockheight(const int& height) = 0;
	virtual Json::Value getblocks(const int& page) = 0;
	virtual Json::Value getlatesttransactions() = 0;
	virtual Json::Value getrawtx(const std::string& hash) = 0;

	virtual Json::Value tx_hash(const std::string& hash) = 0;
	virtual Json::Value tx_index(const int& index) = 0;
	virtual Json::Value block_hash(const std::string& hash) = 0;
	virtual Json::Value block_index(const int& index) = 0;
	virtual Json::Value block_height(const int& height) = 0;
	virtual Json::Value address_balance(const std::string& address, const int& confirmations) = 0;
	virtual Json::Value address_unspent(const std::string& address, const int& confirmations) = 0;
};
#endif //_ABSTRACTCACHERSERVER_H_
